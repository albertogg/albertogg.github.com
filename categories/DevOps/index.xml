<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DevOps on Blog</title>
    <link>https://albertogrespan.com/categories/DevOps/</link>
    <description>Recent content in DevOps on Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>alberto@albertogrespan.com (Alberto Grespan)</managingEditor>
    <webMaster>alberto@albertogrespan.com (Alberto Grespan)</webMaster>
    <lastBuildDate>Sat, 18 Jul 2015 00:00:00 +0000</lastBuildDate><atom:link href="https://albertogrespan.com/categories/DevOps/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Dockerfile for Ruby applications</title>
      <link>https://albertogrespan.com/blog/dockerfile-for-ruby-applications/</link>
      <pubDate>Sat, 18 Jul 2015 00:00:00 +0000</pubDate>
      <author>alberto@albertogrespan.com (Alberto Grespan)</author>
      <guid>https://albertogrespan.com/blog/dockerfile-for-ruby-applications/</guid>
      <description>There are different ways you can deploy your Ruby applications in a Docker container. You can either choose one of the many existing Ruby images on the public docker registry, use it as your base and adapt it to your needs or&amp;hellip; build your own Ruby base image from scratch based on your favorite OS and then build your application image on top of it.
In this post we are going through the whole process of building the Ruby image from scratch based on the official Ubuntu 14.</description>
    </item>
    
    <item>
      <title>Creating DigitalOcean images with Packer</title>
      <link>https://albertogrespan.com/blog/creating-digitalocean-images-with-packer/</link>
      <pubDate>Tue, 17 Feb 2015 00:00:00 +0000</pubDate>
      <author>alberto@albertogrespan.com (Alberto Grespan)</author>
      <guid>https://albertogrespan.com/blog/creating-digitalocean-images-with-packer/</guid>
      <description>tl;dr create a simple DigitalOcean Ubuntu 14.04 image that uses shell a provisioner to install Docker.
This post will guide you through the steps needed to create a simple DigitalOcean Ubuntu 14.04 image with the latest Docker and Kernel installed. This is in a way like creating our own DigitalOcean Docker application image. We&amp;rsquo;ll use a shell script as provisioner for this Packer template.
notes: we assume that Packer is already installed on the system, refer to the installation docs here.</description>
    </item>
    
    <item>
      <title>Running multiple domains or subdomains in NGINX using Server Blocks in Ubuntu</title>
      <link>https://albertogrespan.com/blog/running-multiple-domains-or-subdomains-in-nginx-with-server-blocks/</link>
      <pubDate>Tue, 04 Dec 2012 00:00:00 +0000</pubDate>
      <author>alberto@albertogrespan.com (Alberto Grespan)</author>
      <guid>https://albertogrespan.com/blog/running-multiple-domains-or-subdomains-in-nginx-with-server-blocks/</guid>
      <description>Have you ever wonder; how can I have multiple domains or subdomains pointing to different projects but all of them are in just one server? well&amp;hellip;
This will be a very simple tutorial for doing that, with NGINX.
tutorial tasks: Creating or pointing domains/subdomains to the server&amp;rsquo;s IP address Setup NGINX Create a directory to keep the project Change folder permissions Create a simple html page to display Create a new Server Block with your domain or subdomain Setup and link the Server Block Restart NGINX 1.</description>
    </item>
    
  </channel>
</rss>
