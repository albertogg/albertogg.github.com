<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog</title>
    <link>https://albertogrespan.com/</link>
    <description>Recent content on Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>alberto@albertogrespan.com (Alberto Grespan)</managingEditor>
    <webMaster>alberto@albertogrespan.com (Alberto Grespan)</webMaster>
    <lastBuildDate>Wed, 05 Feb 2020 23:08:54 -0400</lastBuildDate>
    
	<atom:link href="https://albertogrespan.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Flashing QMK on a WhiteFox Mechanical Keyboard</title>
      <link>https://albertogrespan.com/blog/mk/flashing-qmk-on-a-whitefox/</link>
      <pubDate>Wed, 05 Feb 2020 23:08:54 -0400</pubDate>
      <author>alberto@albertogrespan.com (Alberto Grespan)</author>
      <guid>https://albertogrespan.com/blog/mk/flashing-qmk-on-a-whitefox/</guid>
      <description>Awhile back I had this itch of wanting to try a different firmware for my then recent mechanical keyboard. By that time I was also completely new to the mechanical keyboard world. To get some new layout for the keyboard I had to jump into a website, select my keyboard layout and start putting things together, it was very straight forward. Some time after I started wondering if I could put a different firmware on the keyboard.</description>
    </item>
    
    <item>
      <title>Lessons From 3D Printing</title>
      <link>https://albertogrespan.com/blog/3d-printing/lessons-from-3d-printing/</link>
      <pubDate>Sat, 16 Nov 2019 18:08:43 -0400</pubDate>
      <author>alberto@albertogrespan.com (Alberto Grespan)</author>
      <guid>https://albertogrespan.com/blog/3d-printing/lessons-from-3d-printing/</guid>
      <description>This post talks about my experiences with 3D printing while using and Ender 3 Pro, what I&amp;rsquo;ve learned, misses and recommendations. My intention with this post will be to keep it up to date with my latest findings.
Calibration Calibration is important no matter what; to get good prints you&amp;rsquo;ll have to calibrate: Extruder steps (e-steps), flow rate multiplier, and PID.
Extruder steps &amp;ldquo;e-steps&amp;rdquo; Depending on your printer setup, if it&amp;rsquo;s bowden or direct you&amp;rsquo;ll calibrate your e-steps differently.</description>
    </item>
    
    <item>
      <title>Hello, Hugo</title>
      <link>https://albertogrespan.com/blog/hello-hugo/</link>
      <pubDate>Sun, 13 Aug 2017 10:00:11 -0400</pubDate>
      <author>alberto@albertogrespan.com (Alberto Grespan)</author>
      <guid>https://albertogrespan.com/blog/hello-hugo/</guid>
      <description>Today I&amp;rsquo;m writing my first blog post generated by Hugo. Hugo is static site generator written in Go. A couple of months ago (maybe more) I decided to move my personal blog from Jekyll to Hugo out of curiosity. Yes, Hugo is indeed much faster and has a lot of great features, but it lacks some things that Jekyll provided (at least for me), such as ad hoc Sass integration, syntax highlighting with Rouge, and automatic deploys to GitHub Pages, either way I decided to dig into Hugo, read the documentation on some of the core parts, and used the migration tool to move my posts.</description>
    </item>
    
    <item>
      <title>Dockerfile for Ruby applications</title>
      <link>https://albertogrespan.com/blog/dockerfile-for-ruby-applications/</link>
      <pubDate>Sat, 18 Jul 2015 00:00:00 +0000</pubDate>
      <author>alberto@albertogrespan.com (Alberto Grespan)</author>
      <guid>https://albertogrespan.com/blog/dockerfile-for-ruby-applications/</guid>
      <description>There are different ways you can deploy your Ruby applications in a Docker container. You can either choose one of the many existing Ruby images on the public docker registry, use it as your base and adapt it to your needs or&amp;hellip; build your own Ruby base image from scratch based on your favorite OS and then build your application image on top of it.
In this post we are going through the whole process of building the Ruby image from scratch based on the official Ubuntu 14.</description>
    </item>
    
    <item>
      <title>Introduction to HTTP testing in Go</title>
      <link>https://albertogrespan.com/blog/introduction-to-http-testing-in-go/</link>
      <pubDate>Sat, 13 Jun 2015 00:00:00 +0000</pubDate>
      <author>alberto@albertogrespan.com (Alberto Grespan)</author>
      <guid>https://albertogrespan.com/blog/introduction-to-http-testing-in-go/</guid>
      <description>This post will be focused on a very basic introduction to HTTP testing in Go. Our goal will be to test a handler named helloHandler that responds with a custom header and a Hello World! body using only Go build-in Packages.
Creating the helloHandler Creating our simple HTTP handler for our desired endpoint should be something like this:
// main.go package main import ( &amp;quot;log&amp;quot; &amp;quot;net/http&amp;quot; ) func helloHandler(w http.</description>
    </item>
    
    <item>
      <title>My most used git aliases</title>
      <link>https://albertogrespan.com/blog/my-most-used-git-aliases/</link>
      <pubDate>Mon, 30 Mar 2015 00:00:00 +0000</pubDate>
      <author>alberto@albertogrespan.com (Alberto Grespan)</author>
      <guid>https://albertogrespan.com/blog/my-most-used-git-aliases/</guid>
      <description>tl;dr short description of my most used git aliases.
 In this post I&amp;rsquo;ll be talking about my most used git aliases in no particular order. I&amp;rsquo;m going to throw all of my .gitconfig in here and that&amp;rsquo;s all.
I believe git is one of the greatest pieces of software ever made. It&amp;rsquo;s a functional tool that just works. If you use git on daily basis I bet you type git at least a hundreds of times a day.</description>
    </item>
    
    <item>
      <title>Creating DigitalOcean images with Packer</title>
      <link>https://albertogrespan.com/blog/creating-digitalocean-images-with-packer/</link>
      <pubDate>Tue, 17 Feb 2015 00:00:00 +0000</pubDate>
      <author>alberto@albertogrespan.com (Alberto Grespan)</author>
      <guid>https://albertogrespan.com/blog/creating-digitalocean-images-with-packer/</guid>
      <description>tl;dr create a simple DigitalOcean Ubuntu 14.04 image that uses shell a provisioner to install Docker.
 This post will guide you through the steps needed to create a simple DigitalOcean Ubuntu 14.04 image with the latest Docker and Kernel installed. This is in a way like creating our own DigitalOcean Docker application image. We&amp;rsquo;ll use a shell script as provisioner for this Packer template.
 notes: we assume that Packer is already installed on the system, refer to the installation docs here.</description>
    </item>
    
    <item>
      <title>Rack middleware</title>
      <link>https://albertogrespan.com/blog/rack-middleware/</link>
      <pubDate>Sat, 31 Jan 2015 00:00:00 +0000</pubDate>
      <author>alberto@albertogrespan.com (Alberto Grespan)</author>
      <guid>https://albertogrespan.com/blog/rack-middleware/</guid>
      <description>tl;dr we are creating two Rack middlewares, one that adds a custom header to all responses and one that adds a new route with a custom response.
 As explained in a previous post about Rack basics, Rack is found on the most popular Ruby web frameworks, as it&amp;rsquo;s an adaptable interface for developing web applications. In this post we are going to create two simple middlewares. The first one will add a custom header to all responses, the second one will add a custom route that responds to /ping and to glue it all together we are using Rack::Builder.</description>
    </item>
    
    <item>
      <title>Extending Doorkeeper models in Rails</title>
      <link>https://albertogrespan.com/blog/extending-doorkeeper-models-in-rails/</link>
      <pubDate>Thu, 15 Jan 2015 00:00:00 +0000</pubDate>
      <author>alberto@albertogrespan.com (Alberto Grespan)</author>
      <guid>https://albertogrespan.com/blog/extending-doorkeeper-models-in-rails/</guid>
      <description>tl;dr use class_eval to extend Doorkeeper models functionality in runtime.
 A few weeks ago at work, we were extending our very basic OAuth2 provider by adding the possibility to either login with Google OAuth2 or with our own. With that we also did a role based level of authorization, nothing complex&amp;hellip; but, as we are using Doorkeeper for the OAuth2 we needed new validations, associations and a couple of new methods in one of their models to fulfill our needs.</description>
    </item>
    
    <item>
      <title>Writing a DSL in Ruby</title>
      <link>https://albertogrespan.com/blog/writing-a-dsl-in-ruby/</link>
      <pubDate>Mon, 29 Dec 2014 00:00:00 +0000</pubDate>
      <author>alberto@albertogrespan.com (Alberto Grespan)</author>
      <guid>https://albertogrespan.com/blog/writing-a-dsl-in-ruby/</guid>
      <description>A Domain Specific Language or DSL is a mini language focused in solving a particular type of problem. That said, it&amp;rsquo;s not a general purpose language like Ruby. Writing a DSL can help us improve the code base by making it more readable.
If you&amp;rsquo;ve used Rails, you&amp;rsquo;ve used and seen tons of DSLs. e.g inside migrations, configuration files etc&amp;hellip; DSLs in Ruby are a common thing and we are making a simple but useful example in this post.</description>
    </item>
    
    <item>
      <title>Rack basics</title>
      <link>https://albertogrespan.com/blog/rack-basics/</link>
      <pubDate>Sun, 30 Nov 2014 00:00:00 +0000</pubDate>
      <author>alberto@albertogrespan.com (Alberto Grespan)</author>
      <guid>https://albertogrespan.com/blog/rack-basics/</guid>
      <description>If you like programming in Ruby it&amp;rsquo;s plausible that you&amp;rsquo;ve used or heard about Rack&amp;hellip; After all Sinatra, Grape and Rails use Rack as a common interface.
What&amp;rsquo;s Rack and how does it work According to Wikipedia:
 Rack provides a minimal, modular and adaptable interface for developing Web applications in Ruby. By wrapping HTTP requests and responses in the simplest way possible, it unifies and distills the API for Web servers, Web frameworks, and software in between (the so-called middleware) into a single method call.</description>
    </item>
    
    <item>
      <title>Error: client and server don&#39;t have same version</title>
      <link>https://albertogrespan.com/blog/error-client-and-server-dont-have-same-version/</link>
      <pubDate>Sat, 08 Nov 2014 00:00:00 +0000</pubDate>
      <author>alberto@albertogrespan.com (Alberto Grespan)</author>
      <guid>https://albertogrespan.com/blog/error-client-and-server-dont-have-same-version/</guid>
      <description>When using Docker through Boot2docker there is a possibility you&amp;rsquo;ve seen:
 Error: client and server don&amp;rsquo;t have same version (client : X, server: X)
 This error occurs because the version of Docker installed on the Boot2docker image and the version of Docker installed on the host machine (your mac) are not the same.
$ docker version Client version: 1.3.0 Client API version: 1.15 Go version (client): go1.3.3 Git commit (client): c78088f OS/Arch (client): darwin/amd64 2014/11/03 13:21:38 Error response from daemon: client and server don&#39;t have same version (client : 1.</description>
    </item>
    
    <item>
      <title>Debugging your vimrc</title>
      <link>https://albertogrespan.com/blog/debugging-your-vimrc/</link>
      <pubDate>Sun, 02 Nov 2014 00:00:00 +0000</pubDate>
      <author>alberto@albertogrespan.com (Alberto Grespan)</author>
      <guid>https://albertogrespan.com/blog/debugging-your-vimrc/</guid>
      <description>tl;dr this is a short guide on how to debug your .vimrc and hopefully it will help you find what&amp;rsquo;s making Vim slower or inconsistent.
 A few days ago I added a bunch of new settings to my .vimrc that made my motion sluggish. This was happening in MacVim and in Vim and it was making me mad because apart from being slow, Vim was using a lot of CPU and with large files it was unbearable.</description>
    </item>
    
    <item>
      <title>CSV file reading in Ruby</title>
      <link>https://albertogrespan.com/blog/csv-file-reading-in-ruby/</link>
      <pubDate>Sun, 26 Oct 2014 00:00:00 +0000</pubDate>
      <author>alberto@albertogrespan.com (Alberto Grespan)</author>
      <guid>https://albertogrespan.com/blog/csv-file-reading-in-ruby/</guid>
      <description>In the recent days I&amp;rsquo;ve started using CSV files more and more for data manipulation, specifically for database seeding. CSV is a super easy to use and it doesn&amp;rsquo;t require a complex text editor&amp;hellip; Google Spreadsheets or VIM will work great.
This post I will show how to read data from .csv file and dumping it in a Ruby Array of Hashes. It will also show how to seed a Rails database.</description>
    </item>
    
    <item>
      <title>Diagnosing the network with Ping, Traceroute and MTR</title>
      <link>https://albertogrespan.com/blog/diagnosing-the-network-with-ping-traceroute-and-mtr/</link>
      <pubDate>Sun, 12 Oct 2014 00:00:00 +0000</pubDate>
      <author>alberto@albertogrespan.com (Alberto Grespan)</author>
      <guid>https://albertogrespan.com/blog/diagnosing-the-network-with-ping-traceroute-and-mtr/</guid>
      <description>When you deal with a really bad internet connection everyday, as I do, you probably diagnose the network more frequently than usual and after that you call your ISP and explain to a person (that may think you are crazy) how you are having packet loss in a hop that belongs to them. Yes, you have to do this as many times as you can, until you get someone at the other end of the phone call that understand what&amp;rsquo;s happening and sends someone to solve the issue, if possible.</description>
    </item>
    
    <item>
      <title>Installing platform specific gems with Bundler</title>
      <link>https://albertogrespan.com/blog/installing-platform-specific-gems-with-bundler/</link>
      <pubDate>Fri, 10 Oct 2014 00:00:00 +0000</pubDate>
      <author>alberto@albertogrespan.com (Alberto Grespan)</author>
      <guid>https://albertogrespan.com/blog/installing-platform-specific-gems-with-bundler/</guid>
      <description>Sometimes we&amp;rsquo;ll need to install specific gems to make our project compatible in different platforms such as MRI, Rubinius, a particular Ruby version, JRuby, windows, etc&amp;hellip;
As you may know, dependency management in Ruby is done through Bundler Gemfile. Bundler comes with a handy CLI command that can help us gather some information about our current platform and help us see a bigger picture of what&amp;rsquo;s going on with our project Gemfile e.</description>
    </item>
    
    <item>
      <title>Deploying Jekyll with Mina and rbenv</title>
      <link>https://albertogrespan.com/blog/deploying-jekyll-with-mina-and-rbenv/</link>
      <pubDate>Sun, 05 Oct 2014 00:00:00 +0000</pubDate>
      <author>alberto@albertogrespan.com (Alberto Grespan)</author>
      <guid>https://albertogrespan.com/blog/deploying-jekyll-with-mina-and-rbenv/</guid>
      <description>The purpose of this post is to show how to deploy a Jekyll site using Mina and it will not show how to serve the site with NGINX or Apache or install any dependencies like Ruby or rbenv on the server.
Even though we are not focusing in the things we mentioned above we&amp;rsquo;ll need a running machine them installed:
 Ruby managed from rbenv NGINX or Apache If deploying from a private repo a new ssh keypair  Installing Mina As Mina is just a gem we will use the gem command to install it or just add it to your Gemfile and bundle it.</description>
    </item>
    
    <item>
      <title>Installing Go on OS X</title>
      <link>https://albertogrespan.com/blog/installing-golang-on-os-x/</link>
      <pubDate>Sun, 24 Aug 2014 00:00:00 +0000</pubDate>
      <author>alberto@albertogrespan.com (Alberto Grespan)</author>
      <guid>https://albertogrespan.com/blog/installing-golang-on-os-x/</guid>
      <description>tl;dr this are my notes for installing Go (Golang) on OS X using hombrew, adding command completions on ZSH, a single GOPATH and all around clean install.
 Today we&amp;rsquo;ll install the Go programming language and dependencies using OS X Homebrew. Keep in mind that this is an specific OS X installation. If you need to install Go on Ubuntu you can follow this guide, after that you can just go on with this tutorial.</description>
    </item>
    
    <item>
      <title>Delete stopped &amp; untagged docker images</title>
      <link>https://albertogrespan.com/blog/delete-stopped-and-untagged-docker-images/</link>
      <pubDate>Mon, 09 Jun 2014 00:00:00 +0000</pubDate>
      <author>alberto@albertogrespan.com (Alberto Grespan)</author>
      <guid>https://albertogrespan.com/blog/delete-stopped-and-untagged-docker-images/</guid>
      <description>If you want or need first stop the containers
$ docker stop $(docker ps -a -q)  Delete all stopped containers
$ docker rm $(docker ps -a -q)  Delete all untagged images (TAG: &amp;lt;none&amp;gt;)
$ docker rmi $(docker images | awk &#39;/^&amp;lt;none&amp;gt;/ { print $3 }&#39;)  </description>
    </item>
    
    <item>
      <title>Installing Ruby the right way on OS X using rbenv</title>
      <link>https://albertogrespan.com/blog/installing-ruby-the-right-way-on-os-x-using-rbenv/</link>
      <pubDate>Tue, 13 May 2014 00:00:00 +0000</pubDate>
      <author>alberto@albertogrespan.com (Alberto Grespan)</author>
      <guid>https://albertogrespan.com/blog/installing-ruby-the-right-way-on-os-x-using-rbenv/</guid>
      <description>tl;dr there are millions of posts about installing Ruby using rbenv in OS X. Most of them miss the point about installing LibYAML and Readline on your system, but they also miss some of the best rbenv plugins that will help your workflow tremendously. In this post I&amp;rsquo;ll handle it.
 I know that Ruby is not the easiest language to install, there are many details and decisions to handle before installing it.</description>
    </item>
    
    <item>
      <title>Always prune remote-tracking branches</title>
      <link>https://albertogrespan.com/blog/always-prune-remote-tracking-branches/</link>
      <pubDate>Sun, 20 Apr 2014 00:00:00 +0000</pubDate>
      <author>alberto@albertogrespan.com (Alberto Grespan)</author>
      <guid>https://albertogrespan.com/blog/always-prune-remote-tracking-branches/</guid>
      <description>tl;dr after version 1.8.5 of git, you can now configure it to automatically prune remote-tracking branches with every fetch/pull.
 Before Git version 1.8.5 if you wanted to prune remote-tracking branches you where forced to use/remember the git fetch --prune command, even if your workflow didn&amp;rsquo;t involve fetching directly with the fetch command. For that reason if you find yourself pulling and then using an alias or just typing git fetch --prune every once in a while, this new Git configuration is perfect for you.</description>
    </item>
    
    <item>
      <title>Rake tasks &amp; Jekyll posts</title>
      <link>https://albertogrespan.com/blog/rake-tasks-and-jekyll-posts/</link>
      <pubDate>Sun, 23 Mar 2014 00:00:00 +0000</pubDate>
      <author>alberto@albertogrespan.com (Alberto Grespan)</author>
      <guid>https://albertogrespan.com/blog/rake-tasks-and-jekyll-posts/</guid>
      <description>tl;dr use Rake tasks to create drafts/posts in Jekyll.
 Creating a draft or a new post is a repetitive task. If you are like me and often forget about things you probably need some automation in your life; if you don&amp;rsquo;t, you can use this and start forgetting.
In this post I&amp;rsquo;ll be talking about some Rake tasks I use that help me create and publish drafts for my Jekyll blog.</description>
    </item>
    
    <item>
      <title>Heroku scheduler and Rails rake tasks</title>
      <link>https://albertogrespan.com/blog/heroku-scheduler-and-rails-rake-tasks/</link>
      <pubDate>Fri, 07 Mar 2014 00:00:00 +0000</pubDate>
      <author>alberto@albertogrespan.com (Alberto Grespan)</author>
      <guid>https://albertogrespan.com/blog/heroku-scheduler-and-rails-rake-tasks/</guid>
      <description>tl;dr we are using the heroku scheduler with Rails and Rake to keep our dyno awake; this will also work for any custom short periodical task.
 Heroku scheduler The Heroku scheduler is a &amp;ldquo;free&amp;rdquo; application add-on that helps you run short tasks every 10, 60 or 3600 minutes. You can use it as much as you want per month, but AFAIK it uses minutes from your dynos. That said, be careful if you are on a tight budget.</description>
    </item>
    
    <item>
      <title>Commit subdirectoy application to Heroku</title>
      <link>https://albertogrespan.com/blog/commit-subdirectoy-app-to-heroku/</link>
      <pubDate>Sun, 27 Oct 2013 00:00:00 +0000</pubDate>
      <author>alberto@albertogrespan.com (Alberto Grespan)</author>
      <guid>https://albertogrespan.com/blog/commit-subdirectoy-app-to-heroku/</guid>
      <description>Directory structure:
. ├── LICENSE ├── README.md ├── express │ ├── Procfile │ ├── README.md │ ├── app.js │ ├── models │ │ └── user.js │ ├── ormConfig.js │ ├── package.json │ └── seeds.js └── railsapi ├── Gemfile ├── Gemfile.lock ├── Procfile ...  If you want to commit any of the projects express or railsapi to Heroku you can use this command:
$ git subtree push --prefix railsapi heroku master  </description>
    </item>
    
    <item>
      <title>Command or control enter in bootstrap forms</title>
      <link>https://albertogrespan.com/blog/command-or-control-enter-in-bootstrap-forms/</link>
      <pubDate>Sat, 13 Jul 2013 00:00:00 +0000</pubDate>
      <author>alberto@albertogrespan.com (Alberto Grespan)</author>
      <guid>https://albertogrespan.com/blog/command-or-control-enter-in-bootstrap-forms/</guid>
      <description>Using command enter to submit:
$(document).on(&#39;keydown&#39;, &#39;.controls &amp;gt; .text, .controls &amp;gt; .string&#39;, function(event) { if(event.keyCode == 13 &amp;amp;&amp;amp; (event.metaKey || event.ctrlKey)) { $(&#39;input.btn.submit-helper&#39;).click(); } });   Add a helper class to your submit button to identify it. If you want to target normal inputs use .text and to target textareas use .string or use both.  </description>
    </item>
    
    <item>
      <title>jQuery scrollTo with pushState</title>
      <link>https://albertogrespan.com/blog/jQuery-scrollTo-with-pushState/</link>
      <pubDate>Sat, 13 Jul 2013 00:00:00 +0000</pubDate>
      <author>alberto@albertogrespan.com (Alberto Grespan)</author>
      <guid>https://albertogrespan.com/blog/jQuery-scrollTo-with-pushState/</guid>
      <description>pushState:
$(document).ready(function() { $(&#39;.nav-scroller &amp;gt; li &amp;gt; a&#39;).click(function(){ var myUri = $(this).attr(&#39;href&#39;); $(&#39;html,body&#39;).animate({ scrollTop: $(&#39;#&#39; + $(this).prop(&#39;class&#39;)).offset().top }, 500); history.pushState(&#39;&#39;, document.title, myUri); return false; }); });   Every navigation anchor element needs a unique class name. The target elements needs the same unique class name but as id.  </description>
    </item>
    
    <item>
      <title>ScrollTo Top using jQuery and Font Awesome icon</title>
      <link>https://albertogrespan.com/blog/scrollTo-Top-using-jQuery/</link>
      <pubDate>Sat, 13 Jul 2013 00:00:00 +0000</pubDate>
      <author>alberto@albertogrespan.com (Alberto Grespan)</author>
      <guid>https://albertogrespan.com/blog/scrollTo-Top-using-jQuery/</guid>
      <description>Scrolling JavaScript:
$(function() { var viewPortWidth = $(window).width(); $(window).scroll(function(event) { event.preventDefault(); if (viewPortWidth &amp;gt; 480) { if ($(this).scrollTop() &amp;gt; 180) { $(&#39;.scrollTo-top&#39;).fadeIn(); } else { $(&#39;.scrollTo-top&#39;).fadeOut(); } } }); $(&#39;.scrollTo-top&#39;).click(function(event) { $(&#39;html, body&#39;).animate({scrollTop : 0 }, 600); event.preventDefault(); }); });  Add the Font Awesome Angle Double Up icon.
&amp;lt;a href=&amp;quot;#&amp;quot; class=&amp;quot;scrollTo-top&amp;quot; style=&amp;quot;display: inline;&amp;quot;&amp;gt; &amp;lt;i class=&amp;quot;fa fa-angle-double-up&amp;quot;&amp;gt;&amp;lt;/i&amp;gt; &amp;lt;/a&amp;gt;  The scss style for the scrollTo-Top button using a Font Awesome icon.</description>
    </item>
    
    <item>
      <title>Send emails in the background using sucker punch</title>
      <link>https://albertogrespan.com/blog/send-emails-in-the-background-using-sucker-punch/</link>
      <pubDate>Sat, 13 Jul 2013 00:00:00 +0000</pubDate>
      <author>alberto@albertogrespan.com (Alberto Grespan)</author>
      <guid>https://albertogrespan.com/blog/send-emails-in-the-background-using-sucker-punch/</guid>
      <description>Sucker punch gem This gem was created by @brandonhilkert with a very specific use case in mind. I&amp;rsquo;m not sure what the use case was, but, I believe it&amp;rsquo;s something like; taking advantage of Heroku web dynos, without needing to pay extra for a worker dyno (this is what I&amp;rsquo;m using it for). If It&amp;rsquo;s not; I&amp;rsquo;m leaning towards simplicity. At this point with sucker_punch in it&amp;rsquo;s version 1.0.1 became dead simple to install and use, no configuration needed.</description>
    </item>
    
    <item>
      <title>Running multiple domains or subdomains in NGINX using Server Blocks in Ubuntu</title>
      <link>https://albertogrespan.com/blog/running-multiple-domains-or-subdomains-in-nginx-with-server-blocks/</link>
      <pubDate>Tue, 04 Dec 2012 00:00:00 +0000</pubDate>
      <author>alberto@albertogrespan.com (Alberto Grespan)</author>
      <guid>https://albertogrespan.com/blog/running-multiple-domains-or-subdomains-in-nginx-with-server-blocks/</guid>
      <description>Have you ever wonder; how can I have multiple domains or subdomains pointing to different projects but all of them are in just one server? well&amp;hellip;
This will be a very simple tutorial for doing that, with NGINX.
tutorial tasks:  Creating or pointing domains/subdomains to the server&amp;rsquo;s IP address Setup NGINX Create a directory to keep the project Change folder permissions Create a simple html page to display Create a new Server Block with your domain or subdomain Setup and link the Server Block Restart NGINX  1.</description>
    </item>
    
    <item>
      <title>The UNIX Operating System</title>
      <link>https://albertogrespan.com/blog/the-unix-operating-system/</link>
      <pubDate>Sun, 23 Sep 2012 00:00:00 +0000</pubDate>
      <author>alberto@albertogrespan.com (Alberto Grespan)</author>
      <guid>https://albertogrespan.com/blog/the-unix-operating-system/</guid>
      <description>&amp;ldquo;The UNIX System: Making Computers More Productive&amp;rdquo; If you work on a Unix-like operating system this video is a must watch! no excuses!
 &amp;ldquo;This film &amp;ldquo;The UNIX System: Making Computers More Productive&amp;rdquo;, is one of two that Bell Labs made in 1982 about UNIX&amp;rsquo;s significance, impact and usability. Even 10 years after its first installation, it&amp;rsquo;s still an introduction to the system. The other film, &amp;ldquo;The UNIX System: Making Computers Easier to Use&amp;rdquo;, is roughly the same, only a little shorter.</description>
    </item>
    
    <item>
      <title>How I did this site using Jekyll and GitHub pages</title>
      <link>https://albertogrespan.com/blog/jekyll-github-pages-blog-tutorial/</link>
      <pubDate>Fri, 10 Feb 2012 00:00:00 +0000</pubDate>
      <author>alberto@albertogrespan.com (Alberto Grespan)</author>
      <guid>https://albertogrespan.com/blog/jekyll-github-pages-blog-tutorial/</guid>
      <description>note: This post is deprecated by newer versions of Jekyll. You can probably summarize all this post with a jekyll new command.
 So, How I did this Jekyll site? This site is runing on GitHub Pages and is using Jekyll for the layouts and blog posts. In this post I will guide you through the steps for you to build your own site using Jekyll.
Let&amp;rsquo;s start from the beginning what&amp;rsquo;s Jekyll?</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://albertogrespan.com/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>alberto@albertogrespan.com (Alberto Grespan)</author>
      <guid>https://albertogrespan.com/about/</guid>
      <description>My name is Alberto Grespan, I&amp;rsquo;m a Software Engineer from Caracas, Venezuela, I love the Internet, Open Source Software, gadgets and playing video games.</description>
    </item>
    
    <item>
      <title>Reliability Engineer - Résumé</title>
      <link>https://albertogrespan.com/resume/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>alberto@albertogrespan.com (Alberto Grespan)</author>
      <guid>https://albertogrespan.com/resume/</guid>
      <description>Alberto Grespan Reliability Engineer - Caracas, Venezuela
alberto@albertogrespan.com - github.com/albertogg
Skills  Languages: Ruby, JRuby, Go, Scala, Java, Bash. API development using Ruby Grape, Go, Akka, Rails. Experience building infrastructure atop of AWS. Infrastructure as code using Terraform and AWS CloudFormation. Configuration management experience with Ansible. Experience with CI/CD pipelines in GitLab and AWS CodePipeline. Database experience using MySQL, PostgreSQL, and VoltDB.  Professional Experience Reliability Engineer at Full 360 Inc, November 2017 - Present</description>
    </item>
    
  </channel>
</rss>