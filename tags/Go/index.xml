<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on Blog</title>
    <link>https://albertogrespan.com/tags/Go/</link>
    <description>Recent content in Go on Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>alberto@albertogrespan.com (Alberto Grespan)</managingEditor>
    <webMaster>alberto@albertogrespan.com (Alberto Grespan)</webMaster>
    <lastBuildDate>Sun, 13 Aug 2017 10:00:11 -0400</lastBuildDate><atom:link href="https://albertogrespan.com/tags/Go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hello, Hugo</title>
      <link>https://albertogrespan.com/blog/hello-hugo/</link>
      <pubDate>Sun, 13 Aug 2017 10:00:11 -0400</pubDate>
      <author>alberto@albertogrespan.com (Alberto Grespan)</author>
      <guid>https://albertogrespan.com/blog/hello-hugo/</guid>
      <description>Today I&amp;rsquo;m writing my first blog post generated by Hugo. Hugo is static site generator written in Go. A couple of months ago (maybe more) I decided to move my personal blog from Jekyll to Hugo out of curiosity. Yes, Hugo is indeed much faster and has a lot of great features, but it lacks some things that Jekyll provided (at least for me), such as ad hoc Sass integration, syntax highlighting with Rouge, and automatic deploys to GitHub Pages, either way I decided to dig into Hugo, read the documentation on some of the core parts, and used the migration tool to move my posts.</description>
    </item>
    
    <item>
      <title>Introduction to HTTP testing in Go</title>
      <link>https://albertogrespan.com/blog/introduction-to-http-testing-in-go/</link>
      <pubDate>Sat, 13 Jun 2015 00:00:00 +0000</pubDate>
      <author>alberto@albertogrespan.com (Alberto Grespan)</author>
      <guid>https://albertogrespan.com/blog/introduction-to-http-testing-in-go/</guid>
      <description>This post will be focused on a very basic introduction to HTTP testing in Go. Our goal will be to test a handler named helloHandler that responds with a custom header and a Hello World! body using only Go build-in Packages.
Creating the helloHandler Creating our simple HTTP handler for our desired endpoint should be something like this:
// main.go package main import ( &amp;quot;log&amp;quot; &amp;quot;net/http&amp;quot; ) func helloHandler(w http.ResponseWriter, r *http.</description>
    </item>
    
    <item>
      <title>Creating DigitalOcean images with Packer</title>
      <link>https://albertogrespan.com/blog/creating-digitalocean-images-with-packer/</link>
      <pubDate>Tue, 17 Feb 2015 00:00:00 +0000</pubDate>
      <author>alberto@albertogrespan.com (Alberto Grespan)</author>
      <guid>https://albertogrespan.com/blog/creating-digitalocean-images-with-packer/</guid>
      <description>tl;dr create a simple DigitalOcean Ubuntu 14.04 image that uses shell a provisioner to install Docker.
 This post will guide you through the steps needed to create a simple DigitalOcean Ubuntu 14.04 image with the latest Docker and Kernel installed. This is in a way like creating our own DigitalOcean Docker application image. We&amp;rsquo;ll use a shell script as provisioner for this Packer template.
 notes: we assume that Packer is already installed on the system, refer to the installation docs here.</description>
    </item>
    
    <item>
      <title>Installing Go on OS X</title>
      <link>https://albertogrespan.com/blog/installing-golang-on-os-x/</link>
      <pubDate>Sun, 24 Aug 2014 00:00:00 +0000</pubDate>
      <author>alberto@albertogrespan.com (Alberto Grespan)</author>
      <guid>https://albertogrespan.com/blog/installing-golang-on-os-x/</guid>
      <description>tl;dr this are my notes for installing Go (Golang) on OS X using hombrew, adding command completions on ZSH, a single GOPATH and all around clean install.
 Today we&amp;rsquo;ll install the Go programming language and dependencies using OS X Homebrew. Keep in mind that this is an specific OS X installation. If you need to install Go on Ubuntu you can follow this guide, after that you can just go on with this tutorial.</description>
    </item>
    
  </channel>
</rss>
