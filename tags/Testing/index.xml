<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Testing on Blog</title>
    <link>https://albertogrespan.com/tags/Testing/</link>
    <description>Recent content in Testing on Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>alberto@albertogrespan.com (Alberto Grespan)</managingEditor>
    <webMaster>alberto@albertogrespan.com (Alberto Grespan)</webMaster>
    <lastBuildDate>Sat, 13 Jun 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://albertogrespan.com/tags/Testing/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Introduction to HTTP testing in Go</title>
      <link>https://albertogrespan.com/blog/introduction-to-http-testing-in-go/</link>
      <pubDate>Sat, 13 Jun 2015 00:00:00 +0000</pubDate>
      <author>alberto@albertogrespan.com (Alberto Grespan)</author>
      <guid>https://albertogrespan.com/blog/introduction-to-http-testing-in-go/</guid>
      <description>This post will be focused on a very basic introduction to HTTP testing in Go. Our goal will be to test a handler named helloHandler that responds with a custom header and a Hello World! body using only Go build-in Packages.
Creating the helloHandler Creating our simple HTTP handler for our desired endpoint should be something like this:
// main.go package main import ( &amp;quot;log&amp;quot; &amp;quot;net/http&amp;quot; ) func helloHandler(w http.</description>
    </item>
    
  </channel>
</rss>