<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ruby on Blog</title>
    <link>http://albertogrespan.com/tags/ruby/</link>
    <description>Recent content in Ruby on Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 13 Aug 2017 10:00:11 -0400</lastBuildDate>
    
	<atom:link href="http://albertogrespan.com/tags/ruby/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hello, Hugo</title>
      <link>http://albertogrespan.com/blog/hello-hugo/</link>
      <pubDate>Sun, 13 Aug 2017 10:00:11 -0400</pubDate>
      
      <guid>http://albertogrespan.com/blog/hello-hugo/</guid>
      <description>Today I&amp;rsquo;m writing my first blog post generated by Hugo. Hugo is static site generator written in Go. A couple of months ago (maybe more) I decided to move my personal blog from Jekyll to Hugo out of curiosity. Yes, Hugo is indeed much faster and has a lot of great features, but it lacks some things that Jekyll provided (at least for me), such as ad hoc Sass integration, syntax highlighting with Rouge, and automatic deploys to GitHub Pages, either way I decided to dig into Hugo, read the documentation on some of the core parts, and used the migration tool to move my posts.</description>
    </item>
    
    <item>
      <title>Dockerfile for Ruby applications</title>
      <link>http://albertogrespan.com/blog/dockerfile-for-ruby-applications/</link>
      <pubDate>Sat, 18 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>http://albertogrespan.com/blog/dockerfile-for-ruby-applications/</guid>
      <description>There are different ways you can deploy your Ruby applications in a Docker container. You can either choose one of the many existing Ruby images on the public docker registry, use it as your base and adapt it to your needs or&amp;hellip; build your own Ruby base image from scratch based on your favorite OS and then build your application image on top of it.
In this post we are going through the whole process of building the Ruby image from scratch based on the official Ubuntu 14.</description>
    </item>
    
    <item>
      <title>Rack middleware</title>
      <link>http://albertogrespan.com/blog/rack-middleware/</link>
      <pubDate>Sat, 31 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://albertogrespan.com/blog/rack-middleware/</guid>
      <description>tl;dr we are creating two Rack middlewares, one that adds a custom header to all responses and one that adds a new route with a custom response.
 As explained in a previous post about Rack basics, Rack is found on the most popular Ruby web frameworks, as it&amp;rsquo;s an adaptable interface for developing web applications. In this post we are going to create two simple middlewares. The first one will add a custom header to all responses, the second one will add a custom route that responds to /ping and to glue it all together we are using Rack::Builder.</description>
    </item>
    
    <item>
      <title>Extending Doorkeeper models in Rails</title>
      <link>http://albertogrespan.com/blog/extending-doorkeeper-models-in-rails/</link>
      <pubDate>Thu, 15 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://albertogrespan.com/blog/extending-doorkeeper-models-in-rails/</guid>
      <description>tl;dr use class_eval to extend Doorkeeper models functionality in runtime.
 A few weeks ago at work, we were extending our very basic OAuth2 provider by adding the possibility to either login with Google OAuth2 or with our own. With that we also did a role based level of authorization, nothing complex&amp;hellip; but, as we are using Doorkeeper for the OAuth2 we needed new validations, associations and a couple of new methods in one of their models to fulfill our needs.</description>
    </item>
    
    <item>
      <title>Writing a DSL in Ruby</title>
      <link>http://albertogrespan.com/blog/writing-a-dsl-in-ruby/</link>
      <pubDate>Mon, 29 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://albertogrespan.com/blog/writing-a-dsl-in-ruby/</guid>
      <description>A Domain Specific Language or DSL is a mini language focused in solving a particular type of problem. That said, it&amp;rsquo;s not a general purpose language like Ruby. Writing a DSL can help us improve the code base by making it more readable.
If you&amp;rsquo;ve used Rails, you&amp;rsquo;ve used and seen tons of DSLs. e.g inside migrations, configuration files etc&amp;hellip; DSLs in Ruby are a common thing and we are making a simple but useful example in this post.</description>
    </item>
    
    <item>
      <title>Rack basics</title>
      <link>http://albertogrespan.com/blog/rack-basics/</link>
      <pubDate>Sun, 30 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://albertogrespan.com/blog/rack-basics/</guid>
      <description>If you like programming in Ruby it&amp;rsquo;s plausible that you&amp;rsquo;ve used or heard about Rack&amp;hellip; After all Sinatra, Grape and Rails use Rack as a common interface.
What&amp;rsquo;s Rack and how does it work According to Wikipedia:
 Rack provides a minimal, modular and adaptable interface for developing Web applications in Ruby. By wrapping HTTP requests and responses in the simplest way possible, it unifies and distills the API for Web servers, Web frameworks, and software in between (the so-called middleware) into a single method call.</description>
    </item>
    
    <item>
      <title>CSV file reading in Ruby</title>
      <link>http://albertogrespan.com/blog/csv-file-reading-in-ruby/</link>
      <pubDate>Sun, 26 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://albertogrespan.com/blog/csv-file-reading-in-ruby/</guid>
      <description>In the recent days I&amp;rsquo;ve started using CSV files more and more for data manipulation, specifically for database seeding. CSV is a super easy to use and it doesn&amp;rsquo;t require a complex text editor&amp;hellip; Google Spreadsheets or VIM will work great.
This post I will show how to read data from .csv file and dumping it in a Ruby Array of Hashes. It will also show how to seed a Rails database.</description>
    </item>
    
    <item>
      <title>Installing platform specific gems with Bundler</title>
      <link>http://albertogrespan.com/blog/installing-platform-specific-gems-with-bundler/</link>
      <pubDate>Fri, 10 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://albertogrespan.com/blog/installing-platform-specific-gems-with-bundler/</guid>
      <description>Sometimes we&amp;rsquo;ll need to install specific gems to make our project compatible in different platforms such as MRI, Rubinius, a particular Ruby version, JRuby, windows, etc&amp;hellip;
As you may know, dependency management in Ruby is done through Bundler Gemfile. Bundler comes with a handy CLI command that can help us gather some information about our current platform and help us see a bigger picture of what&amp;rsquo;s going on with our project Gemfile e.</description>
    </item>
    
    <item>
      <title>Deploying Jekyll with Mina and rbenv</title>
      <link>http://albertogrespan.com/blog/deploying-jekyll-with-mina-and-rbenv/</link>
      <pubDate>Sun, 05 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://albertogrespan.com/blog/deploying-jekyll-with-mina-and-rbenv/</guid>
      <description>The purpose of this post is to show how to deploy a Jekyll site using Mina and it will not show how to serve the site with NGINX or Apache or install any dependencies like Ruby or rbenv on the server.
Even though we are not focusing in the things we mentioned above we&amp;rsquo;ll need a running machine them installed:
 Ruby managed from rbenv NGINX or Apache If deploying from a private repo a new ssh keypair  Installing Mina As Mina is just a gem we will use the gem command to install it or just add it to your Gemfile and bundle it.</description>
    </item>
    
    <item>
      <title>Installing Ruby the right way on OS X using rbenv</title>
      <link>http://albertogrespan.com/blog/installing-ruby-the-right-way-on-os-x-using-rbenv/</link>
      <pubDate>Tue, 13 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://albertogrespan.com/blog/installing-ruby-the-right-way-on-os-x-using-rbenv/</guid>
      <description>tl;dr there are millions of posts about installing Ruby using rbenv in OS X. Most of them miss the point about installing LibYAML and Readline on your system, but they also miss some of the best rbenv plugins that will help your workflow tremendously. In this post I&amp;rsquo;ll handle it.
 I know that Ruby is not the easiest language to install, there are many details and decisions to handle before installing it.</description>
    </item>
    
    <item>
      <title>Rake tasks &amp; Jekyll posts</title>
      <link>http://albertogrespan.com/blog/rake-tasks-and-jekyll-posts/</link>
      <pubDate>Sun, 23 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://albertogrespan.com/blog/rake-tasks-and-jekyll-posts/</guid>
      <description>tl;dr use Rake tasks to create drafts/posts in Jekyll.
 Creating a draft or a new post is a repetitive task. If you are like me and often forget about things you probably need some automation in your life; if you don&amp;rsquo;t, you can use this and start forgetting.
In this post I&amp;rsquo;ll be talking about some Rake tasks I use that help me create and publish drafts for my Jekyll blog.</description>
    </item>
    
    <item>
      <title>Heroku scheduler and Rails rake tasks</title>
      <link>http://albertogrespan.com/blog/heroku-scheduler-and-rails-rake-tasks/</link>
      <pubDate>Fri, 07 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://albertogrespan.com/blog/heroku-scheduler-and-rails-rake-tasks/</guid>
      <description>tl;dr we are using the heroku scheduler with Rails and Rake to keep our dyno awake; this will also work for any custom short periodical task.
 Heroku scheduler The Heroku scheduler is a &amp;ldquo;free&amp;rdquo; application add-on that helps you run short tasks every 10, 60 or 3600 minutes. You can use it as much as you want per month, but AFAIK it uses minutes from your dynos. That said, be careful if you are on a tight budget.</description>
    </item>
    
    <item>
      <title>Commit subdirectoy application to Heroku</title>
      <link>http://albertogrespan.com/blog/commit-subdirectoy-app-to-heroku/</link>
      <pubDate>Sun, 27 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://albertogrespan.com/blog/commit-subdirectoy-app-to-heroku/</guid>
      <description>Directory structure:
. ├── LICENSE ├── README.md ├── express │ ├── Procfile │ ├── README.md │ ├── app.js │ ├── models │ │ └── user.js │ ├── ormConfig.js │ ├── package.json │ └── seeds.js └── railsapi ├── Gemfile ├── Gemfile.lock ├── Procfile ...  If you want to commit any of the projects express or railsapi to Heroku you can use this command:
$ git subtree push --prefix railsapi heroku master  </description>
    </item>
    
    <item>
      <title>Send emails in the background using sucker punch</title>
      <link>http://albertogrespan.com/blog/send-emails-in-the-background-using-sucker-punch/</link>
      <pubDate>Sat, 13 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://albertogrespan.com/blog/send-emails-in-the-background-using-sucker-punch/</guid>
      <description>Sucker punch gem This gem was created by @brandonhilkert with a very specific use case in mind. I&amp;rsquo;m not sure what the use case was, but, I believe it&amp;rsquo;s something like; taking advantage of Heroku web dynos, without needing to pay extra for a worker dyno (this is what I&amp;rsquo;m using it for). If It&amp;rsquo;s not; I&amp;rsquo;m leaning towards simplicity. At this point with sucker_punch in it&amp;rsquo;s version 1.0.1 became dead simple to install and use, no configuration needed.</description>
    </item>
    
    <item>
      <title>How I did this site using Jekyll and GitHub pages</title>
      <link>http://albertogrespan.com/blog/jekyll-github-pages-blog-tutorial/</link>
      <pubDate>Fri, 10 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>http://albertogrespan.com/blog/jekyll-github-pages-blog-tutorial/</guid>
      <description>note: This post is deprecated by newer versions of Jekyll. You can probably summarize all this post with a jekyll new command.
 So, How I did this Jekyll site? This site is runing on GitHub Pages and is using Jekyll for the layouts and blog posts. In this post I will guide you through the steps for you to build your own site using Jekyll.
Let&amp;rsquo;s start from the beginning what&amp;rsquo;s Jekyll?</description>
    </item>
    
  </channel>
</rss>