<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rack on Blog</title>
    <link>https://albertogrespan.com/tags/Rack/</link>
    <description>Recent content in Rack on Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>alberto@albertogrespan.com (Alberto Grespan)</managingEditor>
    <webMaster>alberto@albertogrespan.com (Alberto Grespan)</webMaster>
    <lastBuildDate>Sat, 31 Jan 2015 00:00:00 +0000</lastBuildDate><atom:link href="https://albertogrespan.com/tags/Rack/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Rack middleware</title>
      <link>https://albertogrespan.com/blog/rack-middleware/</link>
      <pubDate>Sat, 31 Jan 2015 00:00:00 +0000</pubDate>
      <author>alberto@albertogrespan.com (Alberto Grespan)</author>
      <guid>https://albertogrespan.com/blog/rack-middleware/</guid>
      <description>tl;dr we are creating two Rack middlewares, one that adds a custom header to all responses and one that adds a new route with a custom response.
As explained in a previous post about Rack basics, Rack is found on the most popular Ruby web frameworks, as it&amp;rsquo;s an adaptable interface for developing web applications. In this post we are going to create two simple middlewares. The first one will add a custom header to all responses, the second one will add a custom route that responds to /ping and to glue it all together we are using Rack::Builder.</description>
    </item>
    
    <item>
      <title>Rack basics</title>
      <link>https://albertogrespan.com/blog/rack-basics/</link>
      <pubDate>Sun, 30 Nov 2014 00:00:00 +0000</pubDate>
      <author>alberto@albertogrespan.com (Alberto Grespan)</author>
      <guid>https://albertogrespan.com/blog/rack-basics/</guid>
      <description>If you like programming in Ruby it&amp;rsquo;s plausible that you&amp;rsquo;ve used or heard about Rack&amp;hellip; After all Sinatra, Grape and Rails use Rack as a common interface.
What&amp;rsquo;s Rack and how does it work According to Wikipedia:
Rack provides a minimal, modular and adaptable interface for developing Web applications in Ruby. By wrapping HTTP requests and responses in the simplest way possible, it unifies and distills the API for Web servers, Web frameworks, and software in between (the so-called middleware) into a single method call.</description>
    </item>
    
  </channel>
</rss>
