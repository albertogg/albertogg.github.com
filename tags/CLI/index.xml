<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CLI on Blog</title>
    <link>https://albertogrespan.com/tags/CLI/</link>
    <description>Recent content in CLI on Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>alberto@albertogrespan.com (Alberto Grespan)</managingEditor>
    <webMaster>alberto@albertogrespan.com (Alberto Grespan)</webMaster>
    <lastBuildDate>Mon, 30 Mar 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://albertogrespan.com/tags/CLI/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>My most used git aliases</title>
      <link>https://albertogrespan.com/blog/my-most-used-git-aliases/</link>
      <pubDate>Mon, 30 Mar 2015 00:00:00 +0000</pubDate>
      <author>alberto@albertogrespan.com (Alberto Grespan)</author>
      <guid>https://albertogrespan.com/blog/my-most-used-git-aliases/</guid>
      <description>tl;dr short description of my most used git aliases.
 In this post I&amp;rsquo;ll be talking about my most used git aliases in no particular order. I&amp;rsquo;m going to throw all of my .gitconfig in here and that&amp;rsquo;s all.
I believe git is one of the greatest pieces of software ever made. It&amp;rsquo;s a functional tool that just works. If you use git on daily basis I bet you type git at least a hundreds of times a day.</description>
    </item>
    
    <item>
      <title>Error: client and server don&#39;t have same version</title>
      <link>https://albertogrespan.com/blog/error-client-and-server-dont-have-same-version/</link>
      <pubDate>Sat, 08 Nov 2014 00:00:00 +0000</pubDate>
      <author>alberto@albertogrespan.com (Alberto Grespan)</author>
      <guid>https://albertogrespan.com/blog/error-client-and-server-dont-have-same-version/</guid>
      <description>When using Docker through Boot2docker there is a possibility you&amp;rsquo;ve seen:
 Error: client and server don&amp;rsquo;t have same version (client : X, server: X)
 This error occurs because the version of Docker installed on the Boot2docker image and the version of Docker installed on the host machine (your mac) are not the same.
$ docker version Client version: 1.3.0 Client API version: 1.15 Go version (client): go1.3.3 Git commit (client): c78088f OS/Arch (client): darwin/amd64 2014/11/03 13:21:38 Error response from daemon: client and server don&#39;t have same version (client : 1.</description>
    </item>
    
    <item>
      <title>Diagnosing the network with Ping, Traceroute and MTR</title>
      <link>https://albertogrespan.com/blog/diagnosing-the-network-with-ping-traceroute-and-mtr/</link>
      <pubDate>Sun, 12 Oct 2014 00:00:00 +0000</pubDate>
      <author>alberto@albertogrespan.com (Alberto Grespan)</author>
      <guid>https://albertogrespan.com/blog/diagnosing-the-network-with-ping-traceroute-and-mtr/</guid>
      <description>When you deal with a really bad internet connection everyday, as I do, you probably diagnose the network more frequently than usual and after that you call your ISP and explain to a person (that may think you are crazy) how you are having packet loss in a hop that belongs to them. Yes, you have to do this as many times as you can, until you get someone at the other end of the phone call that understand what&amp;rsquo;s happening and sends someone to solve the issue, if possible.</description>
    </item>
    
    <item>
      <title>Installing Go on OS X</title>
      <link>https://albertogrespan.com/blog/installing-golang-on-os-x/</link>
      <pubDate>Sun, 24 Aug 2014 00:00:00 +0000</pubDate>
      <author>alberto@albertogrespan.com (Alberto Grespan)</author>
      <guid>https://albertogrespan.com/blog/installing-golang-on-os-x/</guid>
      <description>tl;dr this are my notes for installing Go (Golang) on OS X using hombrew, adding command completions on ZSH, a single GOPATH and all around clean install.
 Today we&amp;rsquo;ll install the Go programming language and dependencies using OS X Homebrew. Keep in mind that this is an specific OS X installation. If you need to install Go on Ubuntu you can follow this guide, after that you can just go on with this tutorial.</description>
    </item>
    
    <item>
      <title>Delete stopped &amp; untagged docker images</title>
      <link>https://albertogrespan.com/blog/delete-stopped-and-untagged-docker-images/</link>
      <pubDate>Mon, 09 Jun 2014 00:00:00 +0000</pubDate>
      <author>alberto@albertogrespan.com (Alberto Grespan)</author>
      <guid>https://albertogrespan.com/blog/delete-stopped-and-untagged-docker-images/</guid>
      <description>If you want or need first stop the containers
$ docker stop $(docker ps -a -q)  Delete all stopped containers
$ docker rm $(docker ps -a -q)  Delete all untagged images (TAG: &amp;lt;none&amp;gt;)
$ docker rmi $(docker images | awk &#39;/^&amp;lt;none&amp;gt;/ { print $3 }&#39;)  </description>
    </item>
    
    <item>
      <title>Installing Ruby the right way on OS X using rbenv</title>
      <link>https://albertogrespan.com/blog/installing-ruby-the-right-way-on-os-x-using-rbenv/</link>
      <pubDate>Tue, 13 May 2014 00:00:00 +0000</pubDate>
      <author>alberto@albertogrespan.com (Alberto Grespan)</author>
      <guid>https://albertogrespan.com/blog/installing-ruby-the-right-way-on-os-x-using-rbenv/</guid>
      <description>tl;dr there are millions of posts about installing Ruby using rbenv in OS X. Most of them miss the point about installing LibYAML and Readline on your system, but they also miss some of the best rbenv plugins that will help your workflow tremendously. In this post I&amp;rsquo;ll handle it.
 I know that Ruby is not the easiest language to install, there are many details and decisions to handle before installing it.</description>
    </item>
    
    <item>
      <title>Always prune remote-tracking branches</title>
      <link>https://albertogrespan.com/blog/always-prune-remote-tracking-branches/</link>
      <pubDate>Sun, 20 Apr 2014 00:00:00 +0000</pubDate>
      <author>alberto@albertogrespan.com (Alberto Grespan)</author>
      <guid>https://albertogrespan.com/blog/always-prune-remote-tracking-branches/</guid>
      <description>tl;dr after version 1.8.5 of git, you can now configure it to automatically prune remote-tracking branches with every fetch/pull.
 Before Git version 1.8.5 if you wanted to prune remote-tracking branches you where forced to use/remember the git fetch --prune command, even if your workflow didn&amp;rsquo;t involve fetching directly with the fetch command. For that reason if you find yourself pulling and then using an alias or just typing git fetch --prune every once in a while, this new Git configuration is perfect for you.</description>
    </item>
    
    <item>
      <title>Heroku scheduler and Rails rake tasks</title>
      <link>https://albertogrespan.com/blog/heroku-scheduler-and-rails-rake-tasks/</link>
      <pubDate>Fri, 07 Mar 2014 00:00:00 +0000</pubDate>
      <author>alberto@albertogrespan.com (Alberto Grespan)</author>
      <guid>https://albertogrespan.com/blog/heroku-scheduler-and-rails-rake-tasks/</guid>
      <description>tl;dr we are using the heroku scheduler with Rails and Rake to keep our dyno awake; this will also work for any custom short periodical task.
 Heroku scheduler The Heroku scheduler is a &amp;ldquo;free&amp;rdquo; application add-on that helps you run short tasks every 10, 60 or 3600 minutes. You can use it as much as you want per month, but AFAIK it uses minutes from your dynos. That said, be careful if you are on a tight budget.</description>
    </item>
    
    <item>
      <title>Commit subdirectoy application to Heroku</title>
      <link>https://albertogrespan.com/blog/commit-subdirectoy-app-to-heroku/</link>
      <pubDate>Sun, 27 Oct 2013 00:00:00 +0000</pubDate>
      <author>alberto@albertogrespan.com (Alberto Grespan)</author>
      <guid>https://albertogrespan.com/blog/commit-subdirectoy-app-to-heroku/</guid>
      <description>Directory structure:
. ├── LICENSE ├── README.md ├── express │ ├── Procfile │ ├── README.md │ ├── app.js │ ├── models │ │ └── user.js │ ├── ormConfig.js │ ├── package.json │ └── seeds.js └── railsapi ├── Gemfile ├── Gemfile.lock ├── Procfile ...  If you want to commit any of the projects express or railsapi to Heroku you can use this command:
$ git subtree push --prefix railsapi heroku master  </description>
    </item>
    
  </channel>
</rss>